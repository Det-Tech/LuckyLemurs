{"version":3,"file":"index.esm.js","sources":["../src/utils/borsh.ts","../src/utils/crypto.ts","../src/utils/tupleNumeric.ts","../src/errors.ts","../src/providers/conversion/ConversionRateProvider.ts","../src/providers/conversion/Coingecko.ts","../src/providers/storage/arweave/ArweaveStorage.ts","../src/Connection.ts","../src/Account.ts","../src/config.ts","../src/Program.ts","../src/programs/auction/AuctionProgram.ts","../src/programs/auction/accouns/BidderMetadata.ts","../src/programs/auction/accouns/BidderPot.ts","../src/programs/auction/accouns/Auction.ts","../src/programs/auction/accouns/AuctionExtended.ts","../src/programs/metadata/MetadataProgram.ts","../src/programs/metadata/accounts/Edition.ts","../src/programs/metadata/accounts/EditionMarker.ts","../src/programs/metadata/accounts/MasterEdition.ts","../src/programs/metadata/accounts/Metadata.ts","../src/programs/metaplex/MetaplexProgram.ts","../src/programs/metaplex/accounts/BidRedemptionTicket.ts","../src/programs/metaplex/accounts/AuctionManager.ts","../src/programs/metaplex/accounts/PayoutTicket.ts","../src/programs/metaplex/accounts/PrizeTrackingTicket.ts","../src/programs/metaplex/accounts/SafetyDepositConfig.ts","../src/programs/metaplex/accounts/WhitelistedCreator.ts","../src/programs/metaplex/accounts/Store.ts","../src/Transaction.ts","../src/programs/vault/VaultProgram.ts","../src/programs/vault/accounts/SafetyDepositBox.ts","../src/programs/vault/accounts/Vault.ts","../src/programs/metaplex/transactions/SetStore.ts","../src/programs/nft-packs/NFTPacksProgram.ts","../src/programs/nft-packs/accounts/PackCard.ts","../src/programs/nft-packs/accounts/PackSet.ts","../src/programs/nft-packs/accounts/PackVoucher.ts","../src/programs/nft-packs/accounts/ProvingProcess.ts","../src/programs/shared/transactions/PayForFiles.ts","../src/programs/shared/transactions/CreateMint.ts","../src/programs/shared/transactions/CreateAssociatedTokenAccount.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { deserializeUnchecked, serialize, BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { Buffer } from 'buffer';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array); // pubkey string\n  };\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: string, // pubkey string\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport class Struct<T> {\n  readonly fields;\n  readonly dependencies: Struct<any>[] = [];\n  readonly type: any; //(args: T) => T;\n  readonly schema: Map<any, any>;\n\n  constructor(fields: any[][], dependencies: Struct<any>[] = [], parse?: (args: T) => T) {\n    this.fields = fields;\n    this.dependencies = dependencies;\n\n    this.type = class Type {\n      constructor(args: T = {} as T) {\n        for (const [name] of fields) {\n          if (!(name in args)) {\n            (args as any)[name] = undefined;\n          }\n        }\n        parse && parse(args);\n        for (const key of Object.keys(args)) {\n          this[key] = args[key];\n        }\n      }\n    };\n\n    const entries = [\n      [\n        this.type,\n        {\n          kind: 'struct',\n          fields,\n        },\n      ],\n    ] as any;\n    for (const d of this.dependencies) entries.push(...d.schema.entries());\n    this.schema = new Map(entries);\n  }\n\n  static create<T>(fields: any[][], dependencies: Struct<any>[] = [], parse?: (args: T) => T) {\n    return new Struct(fields, dependencies, parse);\n  }\n\n  serialize(struct: T) {\n    return Buffer.from(serialize(this.schema, new this.type(struct)));\n  }\n\n  deserialize(buffer: Buffer) {\n    return deserializeUnchecked(this.schema, this.type, buffer) as T;\n  }\n}\n\nexport const struct = Struct.create;\n","import { sha256 } from 'crypto-hash';\nimport { Buffer } from 'buffer';\n\nexport const getFileHash = async (file: Buffer) => Buffer.from(await sha256(file.toString()));\n","import BN from 'bn.js';\n\nexport enum TupleNumericType {\n  U8 = 1,\n  U16 = 2,\n  U32 = 4,\n  U64 = 8,\n}\n\nexport const getBNFromData = (data: Uint8Array, offset: number, dataType: TupleNumericType): BN => {\n  switch (dataType) {\n    case TupleNumericType.U8:\n      return new BN(data[offset], 'le');\n    case TupleNumericType.U16:\n      return new BN(data.slice(offset, offset + 2), 'le');\n    case TupleNumericType.U32:\n      return new BN(data.slice(offset, offset + 4), 'le');\n    case TupleNumericType.U64:\n      return new BN(data.slice(offset, offset + 8), 'le');\n  }\n};\n","export enum ErrorCode {\n  ERROR_INVALID_OWNER,\n  ERROR_INVALID_ACCOUNT_DATA,\n  ERROR_DEPRECATED_ACCOUNT_DATA,\n}\n\nexport class MetaplexError extends Error {\n  errorCode: ErrorCode;\n\n  constructor(errorCode: ErrorCode, message: string) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n}\n\nexport const ERROR_INVALID_OWNER: () => MetaplexError = () => {\n  return new MetaplexError(ErrorCode.ERROR_INVALID_OWNER, 'Invalid owner');\n};\n\nexport const ERROR_INVALID_ACCOUNT_DATA: () => MetaplexError = () => {\n  return new MetaplexError(ErrorCode.ERROR_INVALID_ACCOUNT_DATA, 'Invalid data');\n};\n\nexport const ERROR_DEPRECATED_ACCOUNT_DATA: () => MetaplexError = () => {\n  return new MetaplexError(ErrorCode.ERROR_DEPRECATED_ACCOUNT_DATA, 'Account data is deprecated');\n};\n","// We are keeping an organized enum of all currencies to allow for easier refactoring should\n// we decide to change the way that metaplex names currencies internally\nexport enum Currency {\n  USD = 'usd',\n  EUR = 'eur',\n  AR = 'ar',\n  SOL = 'sol',\n}\n\nexport type ConversionRatePair = {\n  from: Currency;\n  to: Currency;\n  rate: number;\n};\n\nexport abstract class ConversionRateProvider {\n  getRate: (\n    from: Currency | Currency[],\n    to: Currency | Currency[],\n  ) => Promise<ConversionRatePair[]>;\n}\n","import { ConversionRateProvider, Currency } from './ConversionRateProvider';\nimport axios from 'axios';\n\nexport class Coingecko implements ConversionRateProvider {\n  constructor() {}\n\n  // this method translates currency strings to the format that coingecko requires\n  private static translateCurrency(currency: Currency): string {\n    switch (currency) {\n      case Currency.AR:\n        return 'arweave';\n      case Currency.SOL:\n        return 'solana';\n      case Currency.USD:\n        return 'usd';\n      case Currency.EUR:\n        return 'eur';\n      default:\n        throw new Error('Invalid currency supplied to Coingecko conversion rate provider');\n    }\n  }\n\n  async getRate(from: Currency | Currency[], to: Currency | Currency[]) {\n    const fromArray = typeof from === 'string' ? [from] : from;\n    const toArray = typeof to === 'string' ? [to] : to;\n    const fromIds = fromArray.map((currency) => Coingecko.translateCurrency(currency)).join(',');\n    const toIds = toArray.map((currency) => Coingecko.translateCurrency(currency)).join(',');\n    const url = `https://api.coingecko.com/api/v3/simple/price?ids=${fromIds}&vs_currencies=${toIds}`;\n    const response = await axios(url);\n    const data = await response.data;\n    return fromArray.reduce((previousPairs, fromCurrency) => {\n      return [\n        ...previousPairs,\n        ...toArray.map((toCurrency) => ({\n          from: fromCurrency,\n          to: toCurrency,\n          rate: data[Coingecko.translateCurrency(fromCurrency)][\n            Coingecko.translateCurrency(toCurrency)\n          ],\n        })),\n      ];\n    }, []);\n  }\n}\n","import { Storage, UploadResult } from '../Storage';\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\n\nconst ARWEAVE_URL = 'https://arweave.net';\nconst LAMPORT_MULTIPLIER = 10 ** 9;\nconst WINSTON_MULTIPLIER = 10 ** 12;\n\nexport interface ArweaveStorageCtorFields {\n  endpoint: string;\n  env: 'mainnet-beta' | 'testnet' | 'devnet';\n}\n\nexport class ArweaveStorage implements Storage {\n  readonly endpoint: string;\n  readonly env: string;\n\n  constructor({ endpoint, env }: ArweaveStorageCtorFields) {\n    this.endpoint = endpoint;\n    this.env = env;\n  }\n\n  async getAssetCostToStore(files: Map<string, Buffer>, arweaveRate: number, solanaRate: number) {\n    const buffers = Array.from(files.values());\n    const totalBytes = buffers.reduce((sum, f) => (sum += f.byteLength), 0);\n    const txnFeeInWinstons = parseInt(await (await axios(`${ARWEAVE_URL}/price/0`)).data);\n    const byteCostInWinstons = parseInt(\n      await (\n        await axios(`${ARWEAVE_URL}/price/${totalBytes.toString()}`)\n      ).data,\n    );\n    const totalArCost =\n      (txnFeeInWinstons * buffers.length + byteCostInWinstons) / WINSTON_MULTIPLIER;\n    // To figure out how many lamports are required, multiply ar byte cost by this number\n    const arMultiplier = arweaveRate / solanaRate;\n    // We also always make a manifest file, which, though tiny, needs payment.\n    return LAMPORT_MULTIPLIER * totalArCost * arMultiplier * 1.1;\n  }\n\n  async upload(files: Map<string, Buffer>, mintKey: string, txid: string): Promise<UploadResult> {\n    const fileEntries = Array.from(files.entries());\n    const tags = fileEntries.reduce(\n      (acc: Record<string, Array<{ name: string; value: string }>>, f) => {\n        acc[f[0]] = [{ name: 'mint', value: mintKey }];\n        return acc;\n      },\n      {},\n    );\n\n    return {};\n\n    // data.append('tags', JSON.stringify(tags));\n    // data.append('transaction', txid);\n    // data.append('env', this.env);\n    // files.map((f) => {\n    //   data.append('file[]', f);\n    // });\n\n    // const response = await fetch(this.endpoint, {\n    //   method: 'POST',\n    //   // TODO: I hate to do this, but it seems to be like an upstream problem:\n    //   // https://github.com/jimmywarting/FormData/issues/133\n    //   // I'll make sure to track it. - Danny\n    //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //   // @ts-ignore\n    //   body: data,\n    // });\n\n    // return response.json();\n  }\n}\n","import { Commitment, clusterApiUrl, Connection as SolanaConnection } from '@solana/web3.js';\n\nexport enum ChainId {\n  MainnetBeta = 101,\n  Testnet = 102,\n  Devnet = 103,\n}\n\nexport const ENV: Record<string, { endpoint: string; ChainId: ChainId }> = {\n  'mainnet-beta': {\n    endpoint: 'https://api.metaplex.solana.com/',\n    ChainId: ChainId.MainnetBeta,\n  },\n  'mainnet-beta (Solana)': {\n    endpoint: 'https://api.mainnet-beta.solana.com',\n    ChainId: ChainId.MainnetBeta,\n  },\n  'mainnet-beta (Serum)': {\n    endpoint: 'https://solana-api.projectserum.com/',\n    ChainId: ChainId.MainnetBeta,\n  },\n  testnet: {\n    endpoint: clusterApiUrl('testnet'),\n    ChainId: ChainId.Testnet,\n  },\n  devnet: {\n    endpoint: clusterApiUrl('devnet'),\n    ChainId: ChainId.Devnet,\n  },\n};\n\nexport class Connection extends SolanaConnection {\n  constructor(endpoint: keyof typeof ENV | string = 'mainnet-beta', commitment?: Commitment) {\n    if (endpoint in ENV) endpoint = ENV[endpoint].endpoint;\n    super(endpoint, commitment);\n  }\n}\n","import { AccountInfo, Commitment, PublicKey, Connection } from '@solana/web3.js';\nimport { AnyPublicKey } from '@metaplex/types';\nimport { Buffer } from 'buffer';\n\nexport type AccountConstructor<T> = {\n  new (pubkey: AnyPublicKey, info: AccountInfo<Buffer>): T;\n};\n\nexport class Account<T = unknown> {\n  readonly pubkey: PublicKey;\n  readonly info: AccountInfo<Buffer>;\n  data: T;\n\n  constructor(pubkey: AnyPublicKey, info?: AccountInfo<Buffer>) {\n    this.pubkey = new PublicKey(pubkey);\n    this.info = info;\n  }\n\n  static from<T>(this: AccountConstructor<T>, account: Account<unknown>) {\n    return new this(account.pubkey, account.info);\n  }\n\n  static async load<T>(\n    this: AccountConstructor<T>,\n    connection: Connection,\n    pubkey: AnyPublicKey,\n  ): Promise<T> {\n    const info = await Account.getInfo(connection, pubkey);\n\n    return new this(pubkey, info);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static isCompatible(data: Buffer): boolean {\n    throw new Error(`method 'isCompatible' is not implemented`);\n  }\n\n  static async getInfo(connection: Connection, pubkey: AnyPublicKey) {\n    const info = await connection.getAccountInfo(new PublicKey(pubkey));\n    if (!info) {\n      throw new Error(`Unable to find account: ${pubkey}`);\n    }\n\n    return { ...info, data: Buffer.from(info?.data) };\n  }\n\n  static async getInfos(\n    connection: Connection,\n    pubkeys: AnyPublicKey[],\n    commitment: Commitment = 'recent',\n  ) {\n    const BATCH_SIZE = 99; // Must batch above this limit.\n\n    const promises: Promise<Map<AnyPublicKey, AccountInfo<Buffer>> | undefined>[] = [];\n    for (let i = 0; i < pubkeys.length; i += BATCH_SIZE) {\n      promises.push(\n        Account.getMultipleAccounts(\n          connection,\n          pubkeys.slice(i, Math.min(pubkeys.length, i + BATCH_SIZE)),\n          commitment,\n        ),\n      );\n    }\n\n    const results = new Map<AnyPublicKey, AccountInfo<Buffer>>();\n    (await Promise.all(promises)).forEach((result) =>\n      [...(result?.entries() ?? [])].forEach(([k, v]) => results.set(k, v)),\n    );\n    return results;\n  }\n\n  private static async getMultipleAccounts(\n    connection: Connection,\n    pubkeys: AnyPublicKey[],\n    commitment: Commitment,\n  ) {\n    const args = connection._buildArgs([pubkeys.map((k) => k.toString())], commitment, 'base64');\n    const unsafeRes = await (connection as any)._rpcRequest('getMultipleAccounts', args);\n    if (unsafeRes.error) {\n      throw new Error('failed to get info about accounts ' + unsafeRes.error.message);\n    }\n    if (!unsafeRes.result.value) return;\n    const infos = (unsafeRes.result.value as AccountInfo<string[]>[]).map((info) => ({\n      ...info,\n      data: Buffer.from(info.data[0], 'base64'),\n    })) as AccountInfo<Buffer>[];\n    return infos.reduce((acc, info, index) => {\n      acc.set(pubkeys[index], info);\n      return acc;\n    }, new Map<AnyPublicKey, AccountInfo<Buffer>>());\n  }\n\n  assertOwner(pubkey: AnyPublicKey) {\n    return this.info?.owner.equals(new PublicKey(pubkey));\n  }\n\n  toJSON() {\n    return {\n      pubkey: this.pubkey.toString(),\n      info: {\n        executable: !!this.info?.executable,\n        owner: this.info?.owner ? new PublicKey(this.info?.owner) : null,\n        lamports: this.info?.lamports,\n        data: this.info?.data.toJSON(),\n      },\n      data: this.data,\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","// TODO: need to be able to overwrite dynamically\nexport const config = {\n  arweaveWallet: 'HvwC9QSAzvGXhhVrgPmauVwFWcYZhne3hVot9EbHuFTm',\n  programs: {\n    // Metaplex\n    auction: 'auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8',\n    metadata: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n    metaplex: 'p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98',\n    vault: 'vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn',\n    // External\n    memo: 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',\n  },\n};\n","import { PublicKey, Connection, GetProgramAccountsConfig, Commitment } from '@solana/web3.js';\nimport { Account } from './Account';\nimport { Buffer } from 'buffer';\n\nexport abstract class Program<T> extends Account<T> {\n  async findProgramAddress(seeds: (Buffer | Uint8Array)[]) {\n    return (await PublicKey.findProgramAddress(seeds, this.pubkey))[0];\n  }\n\n  async getProgramAccounts(\n    connection: Connection,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ) {\n    return (await connection.getProgramAccounts(this.pubkey, configOrCommitment)).map(\n      ({ pubkey, account }) => new Account(pubkey, account),\n    );\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { config } from '../../config';\nimport { Program } from '../../Program';\n\nexport class AuctionProgram extends Program<{}> {\n  static readonly PREFIX = 'auction';\n  static readonly EXTENDED = 'extended';\n  static readonly PUBKEY = new PublicKey(config.programs.auction);\n\n  constructor() {\n    super(AuctionProgram.PUBKEY);\n  }\n}\n\nexport default new AuctionProgram();\n","import { AccountInfo } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Account } from '../../../Account';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport Program from '../AuctionProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface BidderMetadataData {\n  // Relationship with the bidder who's metadata this covers.\n  bidderPubkey: StringPublicKey;\n  // Relationship with the auction this bid was placed on.\n  auctionPubkey: StringPublicKey;\n  // Amount that the user bid.\n  lastBid: BN;\n  // Tracks the last time this user bid.\n  lastBidTimestamp: BN;\n  // Whether the last bid the user made was cancelled. This should also be enough to know if the\n  // user is a winner, as if cancelled it implies previous bids were also cancelled.\n  cancelled: boolean;\n}\n\nconst bidderMetadataStruct = borsh.struct<BidderMetadataData>([\n  ['bidderPubkey', 'pubkeyAsString'],\n  ['auctionPubkey', 'pubkeyAsString'],\n  ['lastBid', 'u64'],\n  ['lastBidTimestamp', 'u64'],\n  ['cancelled', 'u8'],\n]);\n\nexport class BidderMetadata extends Account<BidderMetadataData> {\n  static readonly DATA_SIZE = 32 + 32 + 8 + 8 + 1;\n\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!BidderMetadata.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = bidderMetadataStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data.length === BidderMetadata.DATA_SIZE;\n  }\n}\n","import { borsh } from '@metaplex/utils';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport Program from '../AuctionProgram';\nimport { AccountInfo } from '@solana/web3.js';\nimport { Account } from '../../../Account';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface BiddePotData {\n  /// Points at actual pot that is a token account\n  bidderPot: StringPublicKey;\n  bidderAct: StringPublicKey;\n  auctionAct: StringPublicKey;\n  emptied: boolean;\n}\n\nconst bidderPotStruct = borsh.struct<BiddePotData>([\n  ['bidderPot', 'pubkeyAsString'],\n  ['bidderAct', 'pubkeyAsString'],\n  ['auctionAct', 'pubkeyAsString'],\n  ['emptied', 'u8'],\n]);\n\nexport class BidderPot extends Account<BiddePotData> {\n  static readonly DATA_SIZE = 32 + 32 + 32 + 1;\n  readonly PROGRAM = Program;\n\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!BidderPot.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = bidderPotStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data.length === BidderPot.DATA_SIZE;\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { AuctionProgram } from '../AuctionProgram';\nimport { BidderMetadata } from './BidderMetadata';\nimport { BidderPot } from './BidderPot';\nimport { Buffer } from 'buffer';\n\nexport enum AuctionState {\n  Created = 0,\n  Started,\n  Ended,\n}\n\nexport enum BidStateType {\n  EnglishAuction = 0,\n  OpenEdition = 1,\n}\n\nexport enum PriceFloorType {\n  None = 0,\n  Minimum = 1,\n  BlindedPrice = 2,\n}\n\nexport interface Bid {\n  key: StringPublicKey;\n  amount: BN;\n}\n\nconst bidStruct = borsh.struct<Bid>([\n  ['key', 'pubkeyAsString'],\n  ['amount', 'u64'],\n]);\n\nexport interface BidState {\n  type: BidStateType;\n  bids: Bid[];\n  max: BN;\n}\n\nconst bidStateStruct = borsh.struct<BidState>(\n  [\n    ['type', 'u8'],\n    ['bids', [bidStruct.type]],\n    ['max', 'u64'],\n  ],\n  [bidStruct],\n);\n\nexport interface PriceFloor {\n  type: PriceFloorType;\n  // It's an array of 32 u8s, when minimum, only first 8 are used (a u64), when blinded price, the entire\n  // thing is a hash and not actually a public key, and none is all zeroes\n  hash: Uint8Array;\n  minPrice?: BN;\n}\n\nconst priceFloorStruct = borsh.struct<PriceFloor>(\n  [\n    ['type', 'u8'],\n    ['hash', [32]],\n  ],\n  [],\n  (data) => {\n    if (!data.hash) data.hash = new Uint8Array(32);\n    if (data.type === PriceFloorType.Minimum) {\n      if (data.minPrice) {\n        data.hash.set(data.minPrice.toArrayLike(Buffer, 'le', 8), 0);\n      } else {\n        data.minPrice = new BN((data.hash || new Uint8Array(0)).slice(0, 8), 'le');\n      }\n    }\n    return data;\n  },\n);\n\nexport interface AuctionData {\n  /// Pubkey of the authority with permission to modify this auction.\n  authority: StringPublicKey;\n  /// Token mint for the SPL token being used to bid\n  tokenMint: StringPublicKey;\n  /// The time the last bid was placed, used to keep track of auction timing.\n  lastBid: BN | null;\n  /// Slot time the auction was officially ended by.\n  endedAt: BN | null;\n  /// End time is the cut-off point that the auction is forced to end by.\n  endAuctionAt: BN | null;\n  /// Gap time is the amount of time in slots after the previous bid at which the auction ends.\n  auctionGap: BN | null;\n  /// Minimum price for any bid to meet.\n  priceFloor: PriceFloor;\n  /// The state the auction is in, whether it has started or ended.\n  state: AuctionState;\n  /// Auction Bids, each user may have one bid open at a time.\n  bidState: BidState;\n  /// Used for precalculation on the front end, not a backend key\n  bidRedemptionKey?: StringPublicKey;\n}\n\nconst auctionDataStruct = borsh.struct<AuctionData>(\n  [\n    ['authority', 'pubkeyAsString'],\n    ['tokenMint', 'pubkeyAsString'],\n    ['lastBid', { kind: 'option', type: 'u64' }],\n    ['endedAt', { kind: 'option', type: 'u64' }],\n    ['endAuctionAt', { kind: 'option', type: 'u64' }],\n    ['auctionGap', { kind: 'option', type: 'u64' }],\n    ['priceFloor', priceFloorStruct.type],\n    ['state', 'u8'],\n    ['bidState', bidStateStruct.type],\n  ],\n  [priceFloorStruct, bidStateStruct],\n);\n\nexport class Auction extends Account<AuctionData> {\n  static readonly EXTENDED_DATA_SIZE = 8 + 9 + 2 + 200;\n\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    this.data = auctionDataStruct.deserialize(this.info.data);\n  }\n\n  static getPDA(vault: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(AuctionProgram.PREFIX),\n      AuctionProgram.PUBKEY.toBuffer(),\n      new PublicKey(vault).toBuffer(),\n    ]);\n  }\n\n  async getBidderPots(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for BidderPot by data size\n          {\n            dataSize: BidderPot.DATA_SIZE,\n          },\n          // Filter for assigned to this auction\n          {\n            memcmp: {\n              offset: 32 + 32,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => BidderPot.from(account));\n  }\n\n  async getBidderMetadata(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for BidderMetadata by data size\n          {\n            dataSize: BidderMetadata.DATA_SIZE,\n          },\n          // Filter for assigned to this auction\n          {\n            memcmp: {\n              offset: 32,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => BidderMetadata.from(account));\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { AuctionProgram } from '../AuctionProgram';\nimport { Buffer } from 'buffer';\n\nexport interface AuctionDataExtended {\n  totalUncancelledBids: BN;\n  tickSize: BN | null;\n  gapTickSizePercentage: number | null;\n}\n\nconst auctionDataExtendedStruct = borsh.struct<AuctionDataExtended>([\n  ['totalUncancelledBids', 'u64'],\n  ['tickSize', { kind: 'option', type: 'u64' }],\n  ['gapTickSizePercentage', { kind: 'option', type: 'u8' }],\n]);\n\nexport class AuctionExtended extends Account<AuctionDataExtended> {\n  static readonly DATA_SIZE = 8 + 9 + 2 + 200;\n\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!AuctionExtended.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = auctionDataExtendedStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data.length === AuctionExtended.DATA_SIZE;\n  }\n\n  static getPDA(vault: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(AuctionProgram.PREFIX),\n      AuctionProgram.PUBKEY.toBuffer(),\n      new PublicKey(vault).toBuffer(),\n      Buffer.from(AuctionProgram.EXTENDED),\n    ]);\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { Program } from '../../Program';\nimport { config } from '../../config';\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport class MetadataProgram extends Program<{}> {\n  static readonly PREFIX = 'metadata';\n  static readonly PUBKEY = new PublicKey(config.programs.metadata);\n\n  constructor() {\n    super(MetadataProgram.PUBKEY);\n  }\n}\n\nexport default new MetadataProgram();\n","import { borsh } from '@metaplex/utils';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport Program, { MetadataProgram, MetadataKey } from '../MetadataProgram';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Account } from '../../../Account';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface EditionData {\n  key: MetadataKey;\n  parent: StringPublicKey;\n  edition: BN;\n}\n\nconst editionStruct = borsh.struct<EditionData>(\n  [\n    ['key', 'u8'],\n    ['parent', 'pubkeyAsString'],\n    ['edition', 'u64'],\n  ],\n  [],\n  (data) => {\n    data.key = MetadataKey.EditionV1;\n    return data;\n  },\n);\n\nexport class Edition extends Account<EditionData> {\n  static readonly EDITION_PREFIX = 'edition';\n\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!Edition.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = editionStruct.deserialize(this.info.data);\n  }\n\n  static async getPDA(mint: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetadataProgram.PREFIX),\n      MetadataProgram.PUBKEY.toBuffer(),\n      new PublicKey(mint).toBuffer(),\n      Buffer.from(Edition.EDITION_PREFIX),\n    ]);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetadataKey.EditionV1;\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport { Edition } from './Edition';\nimport Program, { MetadataKey, MetadataProgram } from '../MetadataProgram';\nimport { Buffer } from 'buffer';\n\nexport interface EditionMarkerData {\n  key: MetadataKey;\n  ledger: number[];\n}\n\nconst editionMarkerStruct = borsh.struct<EditionMarkerData>(\n  [\n    ['key', 'u8'],\n    ['ledger', [31]],\n  ],\n  [],\n  (data) => {\n    data.key = MetadataKey.EditionMarker;\n    return data;\n  },\n);\n\nexport class EditionMarker extends Account<EditionMarkerData> {\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!EditionMarker.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = editionMarkerStruct.deserialize(this.info.data);\n  }\n\n  static async getPDA(mint: AnyPublicKey, edition: BN) {\n    const editionNumber = Math.floor(edition.toNumber() / 248);\n\n    return Program.findProgramAddress([\n      Buffer.from(MetadataProgram.PREFIX),\n      MetadataProgram.PUBKEY.toBuffer(),\n      new PublicKey(mint).toBuffer(),\n      Buffer.from(Edition.EDITION_PREFIX),\n      Buffer.from(editionNumber.toString()),\n    ]);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetadataKey.EditionMarker;\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { Account } from '../../../Account';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Edition } from './Edition';\nimport Program, { MetadataKey, MetadataProgram } from '../MetadataProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface MasterEditionData {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  /// V1 Only Field\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// V1 Only Field\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n}\n\nconst masterEditionV2Struct = borsh.struct<MasterEditionData>(\n  [\n    ['key', 'u8'],\n    ['supply', 'u64'],\n    ['maxSupply', { kind: 'option', type: 'u64' }],\n  ],\n  [],\n  (data) => {\n    data.key = MetadataKey.MasterEditionV2;\n    return data;\n  },\n);\n\nconst masterEditionV1Struct = borsh.struct<MasterEditionData>(\n  [\n    ...masterEditionV2Struct.fields,\n    ['printingMint', 'pubkeyAsString'],\n    ['oneTimePrintingAuthorizationMint', 'pubkeyAsString'],\n  ],\n  [],\n  (data) => {\n    data.key = MetadataKey.MasterEditionV1;\n    return data;\n  },\n);\n\nexport class MasterEdition extends Account<MasterEditionData> {\n  static readonly EDITION_PREFIX = 'edition';\n\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (MasterEdition.isMasterEditionV1(this.info.data)) {\n      this.data = masterEditionV1Struct.deserialize(this.info.data);\n    } else if (MasterEdition.isMasterEditionV2(this.info.data)) {\n      this.data = masterEditionV2Struct.deserialize(this.info.data);\n    } else {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n  }\n\n  static async getPDA(mint: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetadataProgram.PREFIX),\n      MetadataProgram.PUBKEY.toBuffer(),\n      new PublicKey(mint).toBuffer(),\n      Buffer.from(MasterEdition.EDITION_PREFIX),\n    ]);\n  }\n\n  static isCompatible(data: Buffer) {\n    return MasterEdition.isMasterEditionV1(data) || MasterEdition.isMasterEditionV2(data);\n  }\n\n  static isMasterEditionV1(data: Buffer) {\n    return data[0] === MetadataKey.MasterEditionV1;\n  }\n\n  static isMasterEditionV2(data: Buffer) {\n    return data[0] === MetadataKey.MasterEditionV2;\n  }\n\n  async getEditions(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for EditionV1 by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([MetadataKey.EditionV1])),\n            },\n          },\n          // Filter for assigned to this master edition\n          {\n            memcmp: {\n              offset: 1,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => Edition.from(account));\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport { Edition } from './Edition';\nimport { MasterEdition } from './MasterEdition';\nimport Program, { MetadataKey, MetadataProgram } from '../MetadataProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n}\n\nconst creatorStruct = borsh.struct<Creator>([\n  ['address', 'pubkeyAsString'],\n  ['verified', 'u8'],\n  ['share', 'u8'],\n]);\n\nexport interface MetadataDataData {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n}\n\nconst dataDataStruct = borsh.struct<MetadataDataData>(\n  [\n    ['name', 'string'],\n    ['symbol', 'string'],\n    ['uri', 'string'],\n    ['sellerFeeBasisPoints', 'u16'],\n    ['creators', { kind: 'option', type: [creatorStruct.type] }],\n  ],\n  [creatorStruct],\n  (data) => {\n    const METADATA_REPLACE = new RegExp('\\u0000', 'g');\n    data.name = data.name.replace(METADATA_REPLACE, '');\n    data.uri = data.uri.replace(METADATA_REPLACE, '');\n    data.symbol = data.symbol.replace(METADATA_REPLACE, '');\n    return data;\n  },\n);\n\nexport interface MetadataData {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: MetadataDataData;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy - TODO - remove?\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n}\n\nconst dataStruct = borsh.struct<MetadataData>(\n  [\n    ['key', 'u8'],\n    ['updateAuthority', 'pubkeyAsString'],\n    ['mint', 'pubkeyAsString'],\n    ['data', dataDataStruct.type],\n    ['primarySaleHappened', 'u8'], // bool\n    ['isMutable', 'u8'], // bool\n  ],\n  [dataDataStruct],\n);\n\nexport class Metadata extends Account<MetadataData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!Metadata.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = dataStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetadataKey.MetadataV1;\n  }\n\n  static async getPDA(mint: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetadataProgram.PREFIX),\n      MetadataProgram.PUBKEY.toBuffer(),\n      new PublicKey(mint).toBuffer(),\n    ]);\n  }\n\n  async getEdition(connection: Connection) {\n    const mint = this.data?.mint;\n    if (!mint) return;\n\n    const pda = await Edition.getPDA(mint);\n    const info = await Account.getInfo(connection, pda);\n    const key = info?.data[0];\n\n    switch (key) {\n      case MetadataKey.EditionV1:\n        return new Edition(pda, info);\n      case MetadataKey.MasterEditionV1:\n      case MetadataKey.MasterEditionV2:\n        return new MasterEdition(pda, info);\n      default:\n        return;\n    }\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { Program } from '../../Program';\nimport { config } from '../../config';\n\nexport enum MetaplexKey {\n  Uninitialized = 0,\n  OriginalAuthorityLookupV1 = 1,\n  BidRedemptionTicketV1 = 2,\n  StoreV1 = 3,\n  WhitelistedCreatorV1 = 4,\n  PayoutTicketV1 = 5,\n  SafetyDepositValidationTicketV1 = 6,\n  AuctionManagerV1 = 7,\n  PrizeTrackingTicketV1 = 8,\n  SafetyDepositConfigV1 = 9,\n  AuctionManagerV2 = 10,\n  BidRedemptionTicketV2 = 11,\n  AuctionWinnerTokenTypeTrackerV1 = 12,\n}\n\nexport class MetaplexProgram extends Program<{}> {\n  static readonly PREFIX = 'metaplex';\n  static readonly PUBKEY = new PublicKey(config.programs.metaplex);\n\n  constructor() {\n    super(MetaplexProgram.PUBKEY);\n  }\n}\n\nexport default new MetaplexProgram();\n","import { AccountInfo } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { Account } from '../../../Account';\nimport Program, { MetaplexKey } from '../MetaplexProgram';\nimport {\n  ERROR_DEPRECATED_ACCOUNT_DATA,\n  ERROR_INVALID_ACCOUNT_DATA,\n  ERROR_INVALID_OWNER,\n} from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface BidRedemptionTicketV2Data {\n  key: MetaplexKey;\n  winnerIndex?: BN;\n  auctionManager: StringPublicKey;\n  data: number[];\n}\n\nexport const WINNER_INDEX_OFFSETS = [2, 10];\n\nexport class BidRedemptionTicket extends Account<BidRedemptionTicketV2Data> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (BidRedemptionTicket.isBidRedemptionTicketV1(this.info.data)) {\n      throw ERROR_DEPRECATED_ACCOUNT_DATA();\n    } else if (BidRedemptionTicket.isBidRedemptionTicketV2(this.info.data)) {\n      const data = this.info.data.toJSON().data;\n\n      const winnerIndex = data[1] !== 0 && new BN(data.slice(1, 9), 'le');\n      const offset = WINNER_INDEX_OFFSETS[+!!winnerIndex];\n\n      this.data = {\n        key: MetaplexKey.BidRedemptionTicketV2,\n        winnerIndex,\n        data,\n        auctionManager: bs58.encode(data.slice(offset, offset + 32)),\n      };\n    } else {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n  }\n\n  static isCompatible(data: Buffer) {\n    return (\n      BidRedemptionTicket.isBidRedemptionTicketV1(data) ||\n      BidRedemptionTicket.isBidRedemptionTicketV2(data)\n    );\n  }\n\n  static isBidRedemptionTicketV1(data: Buffer) {\n    return data[0] === MetaplexKey.BidRedemptionTicketV1;\n  }\n\n  static isBidRedemptionTicketV2(data: Buffer) {\n    return data[0] === MetaplexKey.BidRedemptionTicketV2;\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport { BidRedemptionTicket, WINNER_INDEX_OFFSETS } from './BidRedemptionTicket';\nimport Program, { MetaplexKey, MetaplexProgram } from '../MetaplexProgram';\nimport {\n  ERROR_DEPRECATED_ACCOUNT_DATA,\n  ERROR_INVALID_ACCOUNT_DATA,\n  ERROR_INVALID_OWNER,\n} from '@metaplex/errors';\nimport { Auction } from '../../auction';\nimport { Buffer } from 'buffer';\n\nexport enum AuctionManagerStatus {\n  Initialized,\n  Validated,\n  Running,\n  Disbursing,\n  Finished,\n}\n\nexport interface AuctionManagerStateV2 {\n  status: AuctionManagerStatus;\n  safetyConfigItemsValidated: BN;\n  bidsPushedToAcceptPayment: BN;\n  hasParticipation: boolean;\n}\n\nconst AuctionManagerStateV2Struct = borsh.struct<AuctionManagerStateV2>(\n  [\n    ['status', 'u8'],\n    ['safetyConfigItemsValidated', 'u64'],\n    ['bidsPushedToAcceptPayment', 'u64'],\n    ['hasParticipation', 'u8'],\n  ],\n  [],\n  (data) =>\n    Object.assign(\n      {\n        status: AuctionManagerStatus.Initialized,\n        safetyConfigItemsValidated: new BN(0),\n        bidsPushedToAcceptPayment: new BN(0),\n        hasParticipation: false,\n      },\n      data,\n    ),\n);\n\nexport interface AuctionManagerV2Data {\n  key: MetaplexKey;\n  store: StringPublicKey;\n  authority: StringPublicKey;\n  auction: StringPublicKey;\n  vault: StringPublicKey;\n  acceptPayment: StringPublicKey;\n  state: AuctionManagerStateV2;\n}\n\nconst AuctionManagerV2Struct = borsh.struct<AuctionManagerV2Data>(\n  [\n    ['key', 'u8'],\n    ['store', 'pubkeyAsString'],\n    ['authority', 'pubkeyAsString'],\n    ['auction', 'pubkeyAsString'],\n    ['vault', 'pubkeyAsString'],\n    ['acceptPayment', 'pubkeyAsString'],\n    ['state', AuctionManagerStateV2Struct.type],\n  ],\n  [AuctionManagerStateV2Struct],\n  (data) => {\n    data.key = MetaplexKey.AuctionManagerV2;\n    return data;\n  },\n);\n\nexport class AuctionManager extends Account<AuctionManagerV2Data> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (AuctionManager.isAuctionManagerV1(this.info.data)) {\n      throw ERROR_DEPRECATED_ACCOUNT_DATA();\n    } else if (AuctionManager.isAuctionManagerV2(this.info.data)) {\n      this.data = AuctionManagerV2Struct.deserialize(this.info.data);\n    } else {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n  }\n\n  static isCompatible(data: Buffer) {\n    return AuctionManager.isAuctionManagerV1(data) || AuctionManager.isAuctionManagerV2(data);\n  }\n\n  static isAuctionManagerV1(data: Buffer) {\n    return data[0] === MetaplexKey.AuctionManagerV1;\n  }\n\n  static isAuctionManagerV2(data: Buffer) {\n    return data[0] === MetaplexKey.AuctionManagerV2;\n  }\n\n  static getPDA(auction: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetaplexProgram.PREFIX),\n      new PublicKey(auction).toBuffer(),\n    ]);\n  }\n\n  async getAuction(connection: Connection) {\n    return Auction.load(connection, this.data.auction);\n  }\n\n  async getBidRedemptionTickets(connection: Connection, haveWinnerIndex = true) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for BidRedemptionTicketV2 by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([MetaplexKey.BidRedemptionTicketV2])),\n            },\n          },\n          // Filter for assigned to this auction manager\n          {\n            memcmp: {\n              offset: WINNER_INDEX_OFFSETS[+haveWinnerIndex],\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => BidRedemptionTicket.from(account));\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { MetaplexKey } from '../MetaplexProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface PayoutTicketData {\n  key: MetaplexKey;\n  recipient: StringPublicKey;\n  amountPaid: BN;\n}\n\nconst payoutTicketStruct = borsh.struct<PayoutTicketData>(\n  [\n    ['key', 'u8'],\n    ['recipient', 'pubkeyAsString'],\n    ['amountPaid', 'u64'],\n  ],\n  [],\n  (data) => {\n    data.key = MetaplexKey.PayoutTicketV1;\n    return data;\n  },\n);\n\nexport class PayoutTicket extends Account<PayoutTicketData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!PayoutTicket.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = payoutTicketStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetaplexKey.PayoutTicketV1;\n  }\n\n  static async getPayoutTicketsByRecipient(connection: Connection, recipient: AnyPublicKey) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for PayoutTicketV1 by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([MetaplexKey.PayoutTicketV1])),\n            },\n          },\n          // Filter for assigned to recipient\n          {\n            memcmp: {\n              offset: 1,\n              bytes: new PublicKey(recipient).toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => PayoutTicket.from(account));\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { AnyPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { MetaplexKey, MetaplexProgram } from '../MetaplexProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface PrizeTrackingTicketData {\n  key: MetaplexKey;\n  metadata: string;\n  supplySnapshot: BN;\n  expectedRedemptions: BN;\n  redemptions: BN;\n}\n\nconst prizeTrackingTicketStruct = borsh.struct<PrizeTrackingTicketData>(\n  [\n    ['key', 'u8'],\n    ['metadata', 'pubkeyAsString'],\n    ['supplySnapshot', 'u64'],\n    ['expectedRedemptions', 'u64'],\n    ['redemptions', 'u64'],\n  ],\n  [],\n  (data) => {\n    data.key = MetaplexKey.PrizeTrackingTicketV1;\n    return data;\n  },\n);\n\nexport class PrizeTrackingTicket extends Account<PrizeTrackingTicketData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!PrizeTrackingTicket.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = prizeTrackingTicketStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetaplexKey.PrizeTrackingTicketV1;\n  }\n\n  static async getPDA(auctionManager: AnyPublicKey, mint: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetaplexProgram.PREFIX),\n      MetaplexProgram.PUBKEY.toBuffer(),\n      new PublicKey(auctionManager).toBuffer(),\n      new PublicKey(mint).toBuffer(),\n    ]);\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { getBNFromData, TupleNumericType } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { MetaplexKey, MetaplexProgram } from '../MetaplexProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport enum WinningConfigType {\n  /// You may be selling your one-of-a-kind NFT for the first time, but not it's accompanying Metadata,\n  /// of which you would like to retain ownership. You get 100% of the payment the first sale, then\n  /// royalties forever after.\n  ///\n  /// You may be re-selling something like a Limited/Open Edition print from another auction,\n  /// a master edition record token by itself (Without accompanying metadata/printing ownership), etc.\n  /// This means artists will get royalty fees according to the top level royalty % on the metadata\n  /// split according to their percentages of contribution.\n  ///\n  /// No metadata ownership is transferred in this instruction, which means while you may be transferring\n  /// the token for a limited/open edition away, you would still be (nominally) the owner of the limited edition\n  /// metadata, though it confers no rights or privileges of any kind.\n  TokenOnlyTransfer,\n  /// Means you are auctioning off the master edition record and it's metadata ownership as well as the\n  /// token itself. The other person will be able to mint authorization tokens and make changes to the\n  /// artwork.\n  FullRightsTransfer,\n  /// Means you are using authorization tokens to print off editions during the auction using\n  /// from a MasterEditionV1\n  PrintingV1,\n  /// Means you are using the MasterEditionV2 to print off editions\n  PrintingV2,\n  /// Means you are using a MasterEditionV2 as a participation prize.\n  Participation,\n}\n\nexport enum WinningConstraint {\n  NoParticipationPrize = 0,\n  ParticipationPrizeGiven = 1,\n}\n\nexport enum NonWinningConstraint {\n  NoParticipationPrize = 0,\n  GivenForFixedPrice = 1,\n  GivenForBidPrice = 2,\n}\n\nexport interface AmountRange {\n  amount: BN;\n  length: BN;\n}\n\nexport interface ParticipationConfigV2 {\n  winnerConstraint: WinningConstraint;\n  nonWinningConstraint: NonWinningConstraint;\n  fixedPrice: BN | null;\n}\n\nexport interface ParticipationStateV2 {\n  collectedToAcceptPayment: BN;\n}\n\nexport interface SafetyDepositConfigData {\n  key: MetaplexKey;\n  auctionManager: StringPublicKey;\n  order: BN;\n  winningConfigType: WinningConfigType;\n  amountType: TupleNumericType;\n  lengthType: TupleNumericType;\n  amountRanges: AmountRange[];\n  participationConfig: ParticipationConfigV2 | null;\n  participationState: ParticipationStateV2 | null;\n}\n\nexport class SafetyDepositConfig extends Account<SafetyDepositConfigData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!SafetyDepositConfig.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetaplexKey.SafetyDepositConfigV1;\n  }\n\n  static async getPDA(auctionManager: AnyPublicKey, safetyDeposit: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetaplexProgram.PREFIX),\n      MetaplexProgram.PUBKEY.toBuffer(),\n      new PublicKey(auctionManager).toBuffer(),\n      new PublicKey(safetyDeposit).toBuffer(),\n    ]);\n  }\n}\n\nconst deserialize = (buffer: Buffer) => {\n  const data: SafetyDepositConfigData = {\n    key: MetaplexKey.SafetyDepositConfigV1,\n    auctionManager: bs58.encode(buffer.slice(1, 33)),\n    order: new BN(buffer.slice(33, 41), 'le'),\n    winningConfigType: buffer[41],\n    amountType: buffer[42],\n    lengthType: buffer[43],\n    amountRanges: [],\n    participationConfig: null,\n    participationState: null,\n  };\n\n  const lengthOfArray = new BN(buffer.slice(44, 48), 'le');\n  let offset = 48;\n\n  for (let i = 0; i < lengthOfArray.toNumber(); i++) {\n    const amount = getBNFromData(buffer, offset, data.amountType);\n    offset += data.amountType;\n    const length = getBNFromData(buffer, offset, data.lengthType);\n    offset += data.lengthType;\n    data.amountRanges.push({ amount, length });\n  }\n\n  if (buffer[offset] == 0) {\n    offset += 1;\n    data.participationConfig = null;\n  } else {\n    // pick up participation config manually\n    const winnerConstraint = buffer[offset + 1];\n    const nonWinningConstraint = buffer[offset + 2];\n    let fixedPrice: BN | null = null;\n    offset += 3;\n\n    if (buffer[offset] == 1) {\n      fixedPrice = new BN(buffer.slice(offset + 1, offset + 9), 'le');\n      offset += 9;\n    } else {\n      offset += 1;\n    }\n    data.participationConfig = {\n      winnerConstraint,\n      nonWinningConstraint,\n      fixedPrice,\n    };\n  }\n\n  if (buffer[offset] == 0) {\n    offset += 1;\n    data.participationState = null;\n  } else {\n    // pick up participation state manually\n    const collectedToAcceptPayment = new BN(buffer.slice(offset + 1, offset + 9), 'le');\n    offset += 9;\n    data.participationState = {\n      collectedToAcceptPayment,\n    };\n  }\n\n  return data;\n};\n","import { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport Program, { MetaplexProgram, MetaplexKey } from '../MetaplexProgram';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { Account } from '../../../Account';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface WhitelistedCreatorData {\n  key: MetaplexKey;\n  address: StringPublicKey;\n  activated: boolean;\n}\n\nconst whitelistedCreatorStruct = borsh.struct<WhitelistedCreatorData>(\n  [\n    ['key', 'u8'],\n    ['address', 'pubkeyAsString'],\n    ['activated', 'u8'],\n  ],\n  [],\n  (data) =>\n    Object.assign({ activated: true }, data, {\n      key: MetaplexKey.WhitelistedCreatorV1,\n    }),\n);\n\nexport class WhitelistedCreator extends Account<WhitelistedCreatorData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!WhitelistedCreator.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = whitelistedCreatorStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetaplexKey.WhitelistedCreatorV1;\n  }\n\n  static async getPDA(store: AnyPublicKey, creator: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetaplexProgram.PREFIX),\n      MetaplexProgram.PUBKEY.toBuffer(),\n      new PublicKey(store).toBuffer(),\n      new PublicKey(creator).toBuffer(),\n    ]);\n  }\n}\n","import { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport Program, { MetaplexProgram, MetaplexKey } from '../MetaplexProgram';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { WhitelistedCreator } from './WhitelistedCreator';\nimport { AuctionManager } from './AuctionManager';\nimport { Account } from '../../../Account';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface StoreData {\n  key: MetaplexKey;\n  public: boolean;\n  auctionProgram: StringPublicKey;\n  tokenVaultProgram: StringPublicKey;\n  tokenMetadataProgram: StringPublicKey;\n  tokenProgram: StringPublicKey;\n}\n\nconst storeStruct = borsh.struct<StoreData>(\n  [\n    ['key', 'u8'],\n    ['public', 'u8'],\n    ['auctionProgram', 'pubkeyAsString'],\n    ['tokenVaultProgram', 'pubkeyAsString'],\n    ['tokenMetadataProgram', 'pubkeyAsString'],\n    ['tokenProgram', 'pubkeyAsString'],\n  ],\n  [],\n  (data) => Object.assign({ public: true }, data, { key: MetaplexKey.StoreV1 }),\n);\n\nexport class Store extends Account<StoreData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!Store.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = storeStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === MetaplexKey.StoreV1;\n  }\n\n  static async getPDA(owner: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(MetaplexProgram.PREFIX),\n      MetaplexProgram.PUBKEY.toBuffer(),\n      new PublicKey(owner).toBuffer(),\n    ]);\n  }\n\n  // TODO: we need some filter for current store\n  async getWhitelistedCreators(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for WhitelistedCreatorV1 keys\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([MetaplexKey.WhitelistedCreatorV1])),\n            },\n          },\n        ],\n      })\n    ).map((account) => WhitelistedCreator.from(account));\n  }\n\n  async getAuctionManagers(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for AuctionManagerV2 by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([MetaplexKey.AuctionManagerV2])),\n            },\n          },\n          // Filter for assigned to this store\n          {\n            memcmp: {\n              offset: 1,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => AuctionManager.from(account));\n  }\n}\n","import { Transaction as SolanaTransaction, TransactionCtorFields } from '@solana/web3.js';\n\nexport class Transaction extends SolanaTransaction {\n  constructor(options: TransactionCtorFields) {\n    super(options);\n  }\n\n  static fromCombined(transactions: Transaction[]) {\n    const combinedTransaction = new Transaction({});\n    transactions.forEach((transaction) =>\n      transaction.instructions.forEach((instruction) => {\n        combinedTransaction.add(instruction);\n      }),\n    );\n    return combinedTransaction;\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { Program } from '../../Program';\nimport { config } from '../../config';\n\nexport enum VaultKey {\n  Uninitialized = 0,\n  VaultV1 = 3,\n  SafetyDepositBoxV1 = 1,\n  ExternalPriceAccountV1 = 2,\n}\n\nexport class VaultProgram extends Program<{}> {\n  static readonly PREFIX = 'vault';\n  static readonly PUBKEY = new PublicKey(config.programs.vault);\n\n  constructor() {\n    super(VaultProgram.PUBKEY);\n  }\n}\n\nexport default new VaultProgram();\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { VaultKey, VaultProgram } from '../VaultProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport interface SafetyDepositBoxData {\n  /// Each token type in a vault has it's own box that contains it's mint and a look-back\n  key: VaultKey;\n  /// VaultKey pointing to the parent vault\n  vault: StringPublicKey;\n  /// This particular token's mint\n  tokenMint: StringPublicKey;\n  /// Account that stores the tokens under management\n  store: StringPublicKey;\n  /// the order in the array of registries\n  order: number;\n}\n\nconst safetyDepositStruct = borsh.struct<SafetyDepositBoxData>(\n  [\n    ['key', 'u8'],\n    ['vault', 'pubkeyAsString'],\n    ['tokenMint', 'pubkeyAsString'],\n    ['store', 'pubkeyAsString'],\n    ['order', 'u8'],\n  ],\n  [],\n  (data) => {\n    data.key = VaultKey.SafetyDepositBoxV1;\n    return data;\n  },\n);\n\nexport class SafetyDepositBox extends Account<SafetyDepositBoxData> {\n  constructor(key: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(key, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!SafetyDepositBox.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = safetyDepositStruct.deserialize(this.info.data);\n  }\n\n  static async getPDA(vault: AnyPublicKey, mint: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(VaultProgram.PREFIX),\n      new PublicKey(vault).toBuffer(),\n      new PublicKey(mint).toBuffer(),\n    ]);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === VaultKey.SafetyDepositBoxV1;\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { Account } from '../../../Account';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { SafetyDepositBox } from './SafetyDepositBox';\nimport Program, { VaultKey, VaultProgram } from '../VaultProgram';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { Buffer } from 'buffer';\n\nexport enum VaultState {\n  Inactive = 0,\n  Active = 1,\n  Combined = 2,\n  Deactivated = 3,\n}\n\nexport interface VaultData {\n  key: VaultKey;\n  /// Store token program used\n  tokenProgram: StringPublicKey;\n  /// Mint that produces the fractional shares\n  fractionMint: StringPublicKey;\n  /// Authority who can make changes to the vault\n  authority: StringPublicKey;\n  /// treasury where fractional shares are held for redemption by authority\n  fractionTreasury: StringPublicKey;\n  /// treasury where monies are held for fractional share holders to redeem(burn) shares once buyout is made\n  redeemTreasury: StringPublicKey;\n  /// Can authority mint more shares from fraction_mint after activation\n  allowFurtherShareCreation: boolean;\n\n  /// Must point at an ExternalPriceAccount, which gives permission and price for buyout.\n  pricingLookupAddress: StringPublicKey;\n  /// In inactive state, we use this to set the order key on Safety Deposit Boxes being added and\n  /// then we increment it and save so the next safety deposit box gets the next number.\n  /// In the Combined state during token redemption by authority, we use it as a decrementing counter each time\n  /// The authority of the vault withdrawals a Safety Deposit contents to count down how many\n  /// are left to be opened and closed down. Once this hits zero, and the fraction mint has zero shares,\n  /// then we can deactivate the vault.\n  tokenTypeCount: number;\n  state: VaultState;\n\n  /// Once combination happens, we copy price per share to vault so that if something nefarious happens\n  /// to external price account, like price change, we still have the math 'saved' for use in our calcs\n  lockedPricePerShare: BN;\n}\n\nconst vaultStruct = borsh.struct<VaultData>(\n  [\n    ['key', 'u8'],\n    ['tokenProgram', 'pubkeyAsString'],\n    ['fractionMint', 'pubkeyAsString'],\n    ['authority', 'pubkeyAsString'],\n    ['fractionTreasury', 'pubkeyAsString'],\n    ['redeemTreasury', 'pubkeyAsString'],\n    ['allowFurtherShareCreation', 'u8'],\n    ['pricingLookupAddress', 'pubkeyAsString'],\n    ['tokenTypeCount', 'u8'],\n    ['state', 'u8'],\n    ['lockedPricePerShare', 'u64'],\n  ],\n  [],\n  (data) => {\n    data.key = VaultKey.VaultV1;\n    return data;\n  },\n);\n\nexport class Vault extends Account<VaultData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!Vault.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = vaultStruct.deserialize(this.info.data);\n  }\n\n  static async getPDA(pubkey: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(VaultProgram.PREFIX),\n      VaultProgram.PUBKEY.toBuffer(),\n      new PublicKey(pubkey).toBuffer(),\n    ]);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === VaultKey.VaultV1;\n  }\n\n  async getSafetyDepositBoxes(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for SafetyDepositBoxV1 by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([VaultKey.SafetyDepositBoxV1])),\n            },\n          },\n          // Filter for assigned to this vault\n          {\n            memcmp: {\n              offset: 1,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => SafetyDepositBox.from(account));\n  }\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionCtorFields,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { borsh } from '@metaplex/utils';\nimport { Transaction } from '../../../Transaction';\nimport { VaultProgram } from '../../vault';\nimport { MetadataProgram } from '../../metadata';\nimport { AuctionProgram } from '../../auction';\nimport { MetaplexProgram } from '../MetaplexProgram';\n\nexport interface SetStoreArgs {\n  instruction: number;\n  public: boolean;\n}\n\nconst setStoreStruct = borsh.struct<SetStoreArgs>([\n  ['instruction', 'u8'],\n  ['public', 'u8'],\n]);\n\ntype SetStoreParams = {\n  store: PublicKey;\n  admin: PublicKey;\n  isPublic: boolean;\n};\n\nexport class SetStore extends Transaction {\n  constructor(options: TransactionCtorFields, params: SetStoreParams) {\n    super(options);\n    const { feePayer } = options;\n    const { admin, store, isPublic } = params;\n\n    const data = setStoreStruct.serialize({ instruction: 8, public: isPublic });\n\n    this.add(\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: store,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: admin,\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: feePayer,\n            isSigner: true,\n            isWritable: false,\n          },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          {\n            pubkey: VaultProgram.PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: MetadataProgram.PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: AuctionProgram.PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: MetaplexProgram.PUBKEY,\n        data,\n      }),\n    );\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { Program } from '../../Program';\n\nexport enum NFTPacksAccountType {\n  Uninitialized = 0,\n  PackSet = 1,\n  PackCard = 2,\n  PackVoucher = 3,\n  ProvingProcess = 4,\n}\n\nexport class NFTPacksProgram extends Program<{}> {\n  static readonly PREFIX = 'packs';\n  static readonly PUBKEY = new PublicKey('BNRmGgciUJuyznkYHnmitA9an1BcDDiU9JmjEQwvBYVR');\n\n  constructor() {\n    super(NFTPacksProgram.PUBKEY);\n  }\n}\n\nexport default new NFTPacksProgram();\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { NFTPacksAccountType } from '../NFTPacksProgram';\nimport { Buffer } from 'buffer';\n\nexport enum DistributionType {\n  FixedNumber = 0,\n  ProbabilityBased = 1,\n}\n\nexport interface Distribution {\n  type: DistributionType;\n  value: BN;\n}\n\nconst distributionStruct = borsh.struct<Distribution>([\n  ['type', 'u8'],\n  ['value', 'u64'],\n]);\n\nexport interface PackCardData {\n  accountType: NFTPacksAccountType;\n  /// Pack set\n  packSet: StringPublicKey;\n  /// Master edition account\n  master: StringPublicKey;\n  /// Metadata account\n  metadata: StringPublicKey;\n  /// Program token account which holds MasterEdition token\n  tokenAccount: StringPublicKey;\n  /// How many instances of this card exists in all packs\n  maxSupply?: number;\n  /// Fixed number / probability-based\n  distribution: Distribution;\n  /// How many cards already minted\n  currentSupply: number;\n}\n\nconst packCardStruct = borsh.struct<PackCardData>(\n  [\n    ['accountType', 'u8'],\n    ['packSet', 'pubkeyAsString'],\n    ['master', 'pubkeyAsString'],\n    ['metadata', 'pubkeyAsString'],\n    ['tokenAccount', 'pubkeyAsString'],\n    ['maxSupply', { kind: 'option', type: 'u32' }],\n    ['distribution', distributionStruct.type],\n    ['currentSupply', 'u32'],\n  ],\n  [distributionStruct],\n  (data) => {\n    data.accountType = NFTPacksAccountType.PackCard;\n    return data;\n  },\n);\n\nexport class PackCard extends Account<PackCardData> {\n  static readonly PREFIX = 'card';\n\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!PackCard.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = packCardStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === NFTPacksAccountType.PackCard;\n  }\n\n  static getPDA(packSet: AnyPublicKey, index: number) {\n    return Program.findProgramAddress([\n      Buffer.from(PackCard.PREFIX),\n      new PublicKey(packSet).toBuffer(),\n      Buffer.from(index.toString()),\n    ]);\n  }\n}\n","import { AccountInfo, Connection } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { PackCard } from './PackCard';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { NFTPacksAccountType } from '../NFTPacksProgram';\nimport { Buffer } from 'buffer';\n\nexport enum PackSetState {\n  NotActivated = 0,\n  Activated = 1,\n  Deactivated = 2,\n}\n\nexport interface PackSetData {\n  accountType: NFTPacksAccountType;\n  /// Name\n  name: string;\n  /// Pack authority\n  authority: StringPublicKey;\n  /// Authority to mint voucher editions\n  mintingAuthority: StringPublicKey;\n  /// How many packs are available for redeeming\n  totalPacks: number;\n  /// Card masters counter\n  packCards: number;\n  /// Pack voucher counter\n  packVouchers: number;\n  /// If true authority can make changes at deactivated phase\n  mutable: boolean;\n  /// Pack state\n  state: PackSetState;\n}\n\nconst packSetStruct = borsh.struct<PackSetData>(\n  [\n    ['accountType', 'u8'],\n    ['name', [32]],\n    ['authority', 'pubkeyAsString'],\n    ['mintingAuthority', 'pubkeyAsString'],\n    ['totalPacks', 'u32'],\n    ['packCards', 'u32'],\n    ['packVouchers', 'u32'],\n    ['mutable', 'u8'],\n    ['state', 'u8'],\n  ],\n  [],\n  (data) => {\n    data.accountType = NFTPacksAccountType.PackSet;\n    // Fixed Uint8Array to utf-8 string\n    data.name = String.fromCharCode.apply(null, data.name).replace(/\\0.*$/g, '');\n    data.state = data.state as PackSetState;\n    return data;\n  },\n);\n\nexport class PackSet extends Account<PackSetData> {\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!PackSet.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = packSetStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === NFTPacksAccountType.PackSet;\n  }\n\n  async getCards(connection: Connection) {\n    return (\n      await Program.getProgramAccounts(connection, {\n        filters: [\n          // Filter for PackCard by key\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(Buffer.from([NFTPacksAccountType.PackCard])),\n            },\n          },\n          // Filter for assigned to this pack set\n          {\n            memcmp: {\n              offset: 1,\n              bytes: this.pubkey.toBase58(),\n            },\n          },\n        ],\n      })\n    ).map((account) => PackCard.from(account));\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { NFTPacksAccountType } from '../NFTPacksProgram';\nimport { Buffer } from 'buffer';\n\nexport enum ActionOnProve {\n  Burn = 0,\n  Redeem = 1,\n}\n\nexport interface PackVoucherData {\n  accountType: NFTPacksAccountType;\n  /// Pack set\n  packSet: StringPublicKey;\n  /// Master edition account\n  master: StringPublicKey;\n  /// Metadata account\n  metadata: StringPublicKey;\n  /// Program token account which holds MasterEdition token\n  tokenAccount: StringPublicKey;\n  /// How many instances of this voucher exists in all packs\n  maxSupply?: number;\n  /// How many vouchers already minted\n  currentSupply: number;\n  /// How many vouchers of this type is required to open a pack\n  numberToOpen: number;\n  /// Burn / redeem\n  actionOnProve: ActionOnProve;\n}\n\nconst packVoucherStruct = borsh.struct<PackVoucherData>(\n  [\n    ['accountType', 'u8'],\n    ['packSet', 'pubkeyAsString'],\n    ['master', 'pubkeyAsString'],\n    ['metadata', 'pubkeyAsString'],\n    ['tokenAccount', 'pubkeyAsString'],\n    ['maxSupply', { kind: 'option', type: 'u32' }],\n    ['currentSupply', 'u32'],\n    ['numberToOpen', 'u32'],\n    ['actionOnProve', 'u8'],\n  ],\n  [],\n  (data) => {\n    data.accountType = NFTPacksAccountType.PackVoucher;\n    return data;\n  },\n);\n\nexport class PackVoucher extends Account<PackVoucherData> {\n  static readonly PREFIX = 'voucher';\n\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!PackVoucher.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = packVoucherStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === NFTPacksAccountType.PackVoucher;\n  }\n\n  static getPDA(packSet: AnyPublicKey, index: number) {\n    return Program.findProgramAddress([\n      Buffer.from(PackVoucher.PREFIX),\n      new PublicKey(packSet).toBuffer(),\n      Buffer.from(index.toString()),\n    ]);\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ERROR_INVALID_ACCOUNT_DATA, ERROR_INVALID_OWNER } from '@metaplex/errors';\nimport { AnyPublicKey, StringPublicKey } from '@metaplex/types';\nimport { borsh } from '@metaplex/utils';\nimport { Account } from '../../../Account';\nimport Program, { NFTPacksAccountType } from '../NFTPacksProgram';\nimport { Buffer } from 'buffer';\n\nexport interface ProvingProcessData {\n  accountType: NFTPacksAccountType;\n  /// User wallet\n  userWallet: StringPublicKey;\n  /// Pack set\n  packSet: StringPublicKey;\n  /// Counter of proved vouchers\n  provedVouchers: number;\n  /// Counter of proved editions of each voucher master\n  provedVoucherEditions: number;\n  /// Counter of claimed cards\n  claimedCards: number;\n  /// Counter of claimed editions of each pack card\n  claimedCardEditions: number;\n}\n\nconst provingProcessStruct = borsh.struct<ProvingProcessData>(\n  [\n    ['accountType', 'u8'],\n    ['userWallet', 'pubkeyAsString'],\n    ['packSet', 'pubkeyAsString'],\n    ['provedVouchers', 'u32'],\n    ['provedVoucherEditions', 'u32'],\n    ['claimedCards', 'u32'],\n    ['claimedCardEditions', 'u32'],\n  ],\n  [],\n  (data) => {\n    data.accountType = NFTPacksAccountType.ProvingProcess;\n    return data;\n  },\n);\n\nexport class ProvingProcess extends Account<ProvingProcessData> {\n  static readonly PREFIX = 'proving';\n\n  constructor(pubkey: AnyPublicKey, info: AccountInfo<Buffer>) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(Program.pubkey)) {\n      throw ERROR_INVALID_OWNER();\n    }\n\n    if (!ProvingProcess.isCompatible(this.info.data)) {\n      throw ERROR_INVALID_ACCOUNT_DATA();\n    }\n\n    this.data = provingProcessStruct.deserialize(this.info.data);\n  }\n\n  static isCompatible(data: Buffer) {\n    return data[0] === NFTPacksAccountType.ProvingProcess;\n  }\n\n  static getPDA(packSet: AnyPublicKey, userWallet: AnyPublicKey) {\n    return Program.findProgramAddress([\n      Buffer.from(ProvingProcess.PREFIX),\n      new PublicKey(packSet).toBuffer(),\n      new PublicKey(userWallet).toBuffer(),\n    ]);\n  }\n}\n","import { Transaction } from '../../../Transaction';\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionCtorFields,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { config } from '../../../config';\nimport { Buffer } from 'buffer';\n\ntype PayForFilesParams = {\n  lamports: number;\n  fileHashes: Buffer[];\n  arweaveWallet?: PublicKey;\n};\n\nexport class PayForFiles extends Transaction {\n  constructor(options: TransactionCtorFields, params: PayForFilesParams) {\n    const { feePayer } = options;\n    const { lamports, fileHashes, arweaveWallet } = params;\n\n    super(options);\n\n    this.add(\n      SystemProgram.transfer({\n        fromPubkey: feePayer,\n        toPubkey: arweaveWallet ?? new PublicKey(config.arweaveWallet),\n        lamports,\n      }),\n    );\n\n    fileHashes.forEach((data) => {\n      this.add(\n        new TransactionInstruction({\n          keys: [],\n          programId: new PublicKey(config.programs.memo),\n          data,\n        }),\n      );\n    });\n  }\n}\n","import { Transaction } from '../../../Transaction';\nimport { MintLayout, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { PublicKey, SystemProgram, TransactionCtorFields } from '@solana/web3.js';\n\ntype CreateMintParams = {\n  newAccountPubkey: PublicKey;\n  lamports: number;\n  decimals?: number;\n  owner?: PublicKey;\n  freezeAuthority?: PublicKey;\n};\n\nexport class CreateMint extends Transaction {\n  constructor(options: TransactionCtorFields, params: CreateMintParams) {\n    const { feePayer } = options;\n    const { newAccountPubkey, lamports, decimals, owner, freezeAuthority } = params;\n\n    super(options);\n\n    this.add(\n      SystemProgram.createAccount({\n        fromPubkey: feePayer,\n        newAccountPubkey: newAccountPubkey,\n        lamports,\n        space: MintLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    );\n\n    this.add(\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        newAccountPubkey,\n        decimals ?? 0,\n        owner ?? feePayer,\n        freezeAuthority ?? feePayer,\n      ),\n    );\n  }\n}\n","import { Transaction } from '../../../Transaction';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionCtorFields,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Buffer } from 'buffer';\n\ntype CreateAssociatedTokenAccountParams = {\n  associatedTokenAddress: PublicKey;\n  walletAddress?: PublicKey;\n  splTokenMintAddress: PublicKey;\n};\n\nexport class CreateAssociatedTokenAccount extends Transaction {\n  constructor(options: TransactionCtorFields, params: CreateAssociatedTokenAccountParams) {\n    const { feePayer } = options;\n    const { associatedTokenAddress, walletAddress, splTokenMintAddress } = params;\n    super(options);\n\n    this.add(\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: feePayer,\n            isSigner: true,\n            isWritable: true,\n          },\n          {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: walletAddress ?? feePayer,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n        data: Buffer.from([]),\n      }),\n    );\n  }\n}\n"],"names":["base58","SolanaConnection","Program","borsh.struct","SolanaTransaction"],"mappings":"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"}